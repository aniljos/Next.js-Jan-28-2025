Nextjs session 28th-Jan-2025



Git Url: https://github.com/aniljos/Next.js-Jan-28-2025
REST API Mock: https://github.com/aniljos/REST-API-Mock

Babel cdn: https://cdnjs.com/libraries/babel-standalone/7.26.3

Quiz Day 1: https://forms.gle/5ii116MfS1V334Dv8
Quiz Day 2: https://forms.gle/jVX3xvEyM62QaC5c7
Quiz Day 3: https://forms.gle/C1Nckikm5yzxu5du8

Project Files

1. package.json: npm configuration file
		- scripts
		- dependencies: prod & dev
2. node_modules folder
		- all dependencies are installed here
3. tsconfig.json: typescript configuration file
4. next.config.ts: Next configuration
	- API Routes
	- React
5. eslint.config.mjs
	
6. public folder:
	-static resources publically available
7. src folder: optional folder for all the source code
8. app folder : App router related files
9. pages folder: Pages router related files

10. app/layout.tsx: The root component that defines the application layout
11. app/page.tsx: The page to be rendered on the root/home route: (http://localhost:3000/)


React Components
	- Authoring: function or class
	- Rendering: Client components(CSR) or Server Components(SSR)
	- The default for rendering is Server Components
	- To create a client component(functional/ class), annotate with the 'use client' directive
	
props
   - props is read-only
   - <Message text="abc"/> => text is a props ==> props.text
   - <Message>This is a message</Message> => the content(This is a message) is a prop ==> props.children
   

	

   
   
   
state(useState)
   - state updates are asynchronous
   - setState method : 2 overloads
		setState(updateValue)
		setState(callback):  callback(currentValue) => updatedValue
   - state updates are batched
			counter => 5
			setCounter(counter + 1); ==> setCounter(6)
			setCounter(counter + 1); ==> setCounter(6)
			
			setCounter(currentCount => currentCount + 1);  ==> code to invoke the callback(currentCount) 5 => 6
			setCounter(currentCount => currentCount + 1);  ==> code to invoke the callback(currentCount) 6 => 7
   - state should be treated as immutable
		- create a copy(mutable), change the copy and reset the state with the copy.
		
			
useEffect
	- lifecycle hooks: mounted, updated, unmount
	- mounted: This is invoked always after the first render
		- useEffect(setup, [])- dependency should be emtpy.
		- API calls for data fetching
		- Regitering event listeners on the window/document object
		- DOM initilizations
	- unmount: This is invoked before the component is unmounted
		- A callback return from the mount useEffect
		- Cancel the API callback
		- Remove registered listeners
		- Any other cleanup code
	- useEffect(setup, [dependencies])
	
App Design
	- Components are the building block
	- Keep the components small
		- Modular, easy to maintain and test
	- Higher Order Components : components that wrap other components
	- Custom Hooks
		-reuseability, modular, easy test
		
Optimization
	-React.memo : HOC
	-useCallback
	-useMemo
	
	-Virtal DOM

Form Controls
	- uncontrolled : read/set the value by getting a reference the element: useRef
		-non-reactive
	
	- controlled : 
			- bind the control to the state(useState)
			- reactive
			
			
Browser(make http calls)
	- XMLHttpRequest Object
	- fetch apis( HTML 5)
	
Axios
	- Http Status Codes
		100 - Information
		200, 201, 204 - Success
		300 - Redirects
		
		400,401, 403, 404 - Client error
		500, 503 -Server error
		
	- async and await -- Keywords in javascript
		- Used with promises
		- Allows write async code to look and behave as synchronous
		- Overcome callback hell 
		
CSS
  - inline styles: style attribute
  - css class
  - css selectors
  
EditProductPage: Assignment

	- Fetch the product(component mount)- api GET http://localhost:9000/products/[id]
    - Bind the fetched product to the input elements(controlled input)
	- On save button click: update the product
			-PUT http://localhost:9000/products/[id] Post the product
			-save is successful : navigate back to /products/
			- save fails: display a error message
    -on cancel button click
		navigate back to /products/
		
		
State Management
  Browser	
	-localStorage => persistent info available across sessions
	-sessionStorage => available only for that session
	
  Application
	- Memory
		-redux
		-react context
		
Redux
  Library
	- redux
	- react-redux
	- @reduxjs/toolkit
	- npm i @reduxjs/toolkit react-redux
	
  Action: an objeect
	- {type: "set_token", token: "abcd"}
	- {type: "clear_token"}
  Reducer - a function
	- receive the action, updated the state in the store
	- must be synchronous. No any async code like an axios/ fetch call.
	
  Middleware
    - intercepts the action.
	- Logging, validate etc.
	- async code
	- Middleware libraries for async => redux-thunk, redux-saga
  Action creator
    - Design Pattern
	- Helper method to create an actions
  Redux Toolkit
	-  Provides all the boilerplate code(design pattern)
	-  Simplify the using redux 
	-  slices => object which provide a way to work with state as mutable
	- action creator
	
  
	
	
  react-redux library
	-Provider: component to integrate redux with react
	- Hooks
		- useDispatch: returns a dispatch function
		- useSelector: subscribe to the store and select data
		- useStore: returns a handle to the store
	
	
  
React context
	- A low level API
    - Multiple contexts
	- We need to manage the state updates(rerendering of UI) 
	
react hooks
	-useState
	-useEffect
	-useRef
	-useContext
	-useReducer - reducer deisgn pattern, state hook
	
GadgetStore & View Cart(Excercise)

 - implement the functionality using React Context and useReducer/useState
			
			
	

Flow of a Client Component with Data Fetching

1. Request of the page(route).
2. The page(React component) is downloaded from the server
3. The component is executed on the browser which return jSX, converted to HTML
4. HTML rendered on the browser(first render)
5. The mounted useEffect is called - invoke an API
6. A new API request send to the server to fetch the data
7. The component is rerendered.


Flow of a Server Component with Data Fetching

1. Request of the page(route).
2. The page(React Component) is executed on the server.
3. The component code can access backend(database/ api)
4. The component return jSX, converted to HTML
5. The HTML is return the browser for rendering